// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticação por credenciais
  role          UserRole  @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  assignedTickets Ticket[] @relation("AssignedAgent")
  messages      Message[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos do sistema de suporte
model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets   Ticket[]

  @@map("customers")
}

model Ticket {
  id          String        @id @default(cuid())
  subject     String
  description String?       @db.Text
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    String?
  tags        String[]
  
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id])
  
  assignedTo  String?
  assignedAgent User?       @relation("AssignedAgent", fields: [assignedTo], references: [id])
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  closedAt    DateTime?

  messages    Message[]
  emailLogs   EmailLog[]
  
  @@map("tickets")
}

model Message {
  id        String      @id @default(cuid())
  content   String      @db.Text
  isFromCustomer Boolean  @default(true)
  isAiGenerated Boolean  @default(false)
  
  ticketId  String
  ticket    Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  authorId  String?
  author    User?       @relation(fields: [authorId], references: [id])
  
  createdAt DateTime    @default(now())
  
  // Metadados do email
  messageId String?     // ID do email original
  inReplyTo String?     // Para threading
  
  @@map("messages")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  summary     String?  @db.Text
  category    String?
  tags        String[]
  isActive    Boolean  @default(true)
  
  // Metadados do documento
  filename    String?
  fileType    String?
  fileSize    Int?
  
  // Vetorização
  embedding   String?  @db.Text // JSON serializado do vetor
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("knowledge_base")
}

model EmailLog {
  id          String    @id @default(cuid())
  messageId   String    @unique
  from        String
  to          String
  subject     String
  body        String?   @db.Text
  status      EmailStatus @default(RECEIVED)
  direction   EmailDirection
  
  ticketId    String?
  ticket      Ticket?   @relation(fields: [ticketId], references: [id])
  
  createdAt   DateTime  @default(now())
  
  @@map("email_logs")
}

// Enums
enum UserRole {
  ADMIN
  AGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmailStatus {
  RECEIVED
  PROCESSING
  SENT
  FAILED
  BOUNCED
}

enum EmailDirection {
  INBOUND
  OUTBOUND
}
